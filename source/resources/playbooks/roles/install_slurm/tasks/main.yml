---
# tasks file for install_slurm

- name: Show variables used by this role
  debug:
    msg: |
      ansible_architecture:       {{ ansible_architecture }}
      architecture:               {{ architecture }}
      distribution:               {{ distribution }}
      distribution_major_version: {{ distribution_major_version }}
      distribution_version:       {{ distribution_version }}

      amazonlinux2:   {{ amazonlinux2 }}
      alma:           {{ alma }}
      alma8:          {{ alma8 }}
      centos:         {{ centos }}
      centos7:        {{ centos7 }}
      rhel:           {{ rhel }}
      rhel7:          {{ rhel7 }}
      rhel8:          {{ rhel8 }}
      rhel9:          {{ rhel9 }}
      rocky:          {{ rocky }}
      rocky8:         {{ rocky8 }}
      rocky9:         {{ rocky9 }}
      rhelclone:      {{ rhelclone }}
      rhel8clone:     {{ rhel8clone }}
      rhel9clone:     {{ rhel9clone }}
      centos7_5_to_6: {{ centos7_5_to_6 }}
      centos7_5_to_9: {{ centos7_5_to_9 }}
      centos7_7_to_9: {{ centos7_7_to_9 }}

- name: Set slurm_src_dir
  set_fact:
    slurm_src_dir: "/opt/slurm/{{ cluster_name }}/config/src/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}"

- name: Set slurm_os_dir
  set_fact:
    slurm_os_dir:  "/opt/slurm/{{ cluster_name }}/config/os/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}"

- name: Set slurm_bin_dir
  set_fact:
    slurm_bin_dir: "{{ slurm_os_dir }}/bin"

- name: Show variables used by this role
  debug:
    msg: |
      slurm_version:        {{ slurm_version }}
      slurm_src_dir:        {{ slurm_src_dir }}
      slurm_bin_dir:        {{ slurm_bin_dir }}
      slurm_config_dir:     {{ slurm_config_dir }}
      slurm_os_dir:         {{ slurm_os_dir }}
      slurmrestd_port:      {{ slurmrestd_port }}
      slurm_etc_dir:        {{ slurm_etc_dir }}
      modulefiles_base_dir: {{ modulefiles_base_dir }}

- name: Install epel from amazon-linux-extras
  when: distribution == 'Amazon'
  shell:
    cmd: amazon-linux-extras install -y epel
    creates: /etc/yum.repos.d/epel.repo

- name: Install epel from yum
  when: distribution in ['CentOS', 'RedHat']
  yum:
    state: present
    name:
      - epel-release

- name: Enable PowerTools repo
  when: rhel8clone or rhel9clone
  shell:
    cmd: yum-config-manager --enable PowerTools || yum-config-manager --enable powertools

- name: Enable rhel-7-server-rhui-optional-rpms
  when: rhel7
  shell:
    cmd: |
      set -ex
      yum-config-manager --enable rhel-7-server-rhui-optional-rpms
      yum-config-manager --enable rhui-REGION-rhel-server-optional

- name: Enable codeready-builder-for-rhel-8-rhui-rpms repo
  when: rhel8
  shell:
    cmd: |
      yum-config-manager --enable codeready-builder-for-rhel-8-rhui-rpms

- name: Enable codeready-builder-for-rhel-9-rhui-rpms repo
  when: rhel9
  shell:
    cmd: |
      yum-config-manager --enable codeready-builder-for-rhel-9-rhui-rpms

- name: Install slurm packages
  yum:
    state: present
    name:
      - autoconf # To build libjwt
      - automake # To build libjwt
      - bzip2
      - crudini
      - emacs
      - freeipmi-devel
      - fwknop
      - gcc
      - git # To build libjwt
      - gtk2-devel
      - http-parser-devel
      - hwloc-devel
      - jansson-devel # To build libjwt
      - json-c-devel
      - libcurl-devel
      - libtool # To build libjwt
      - libyaml-devel
      - lua-devel
      - lz4-devel
      - mailx
      - make
      - man2html
      # munge is built from ParallelCluster version
      # - munge
      # - munge-devel
      # - munge-libs
      - mysql-devel
      - numactl-devel
      - openmpi
      - openssl-devel # To build libjwt
      - pam-devel
      - perl-devel
      - pmix-devel
      - python3
      - readline-devel
      - rng-tools
      - rrdtool-devel
      - wget

- name: Install hdf5-devel
  when: not(distribution == 'Amazon' and architecture == 'arm64') and not(rhel8 or rhel8clone or rhel9 or rhel9clone)
  yum:
    state: present
    name:
      - hdf5-devel

- name: Install libjwt-devel on non-Amazon arm64
  when: not(distribution == 'Amazon' and architecture == 'arm64')
  yum:
    state: present
    name:
      - libjwt-devel

- name: Install libjwt-devel on Amazon arm64
  when: distribution == 'Amazon' and architecture == 'arm64'
  shell: |
    set -xe

    cd /tmp
    rm -rf libjwt
    git clone --depth 1 --single-branch -b v1.12.0 https://github.com/benmcollins/libjwt.git libjwt
    cd libjwt
    autoreconf --force --install
    ./configure --prefix=/usr/local
    make -j
    make install

- name: Download slurm source
  shell: |
    set -xe

    mkdir -p {{ slurm_src_dir }}
    cd {{ slurm_src_dir }}
    wget https://download.schedmd.com/slurm/slurm-{{ slurm_version }}.tar.bz2
    bzip2 -d -f slurm-{{ slurm_version }}.tar.bz2
    tar -xf slurm-{{ slurm_version }}.tar
    rm slurm-{{ slurm_version }}.tar

  args:
    creates: "{{ slurm_src_dir }}/slurm-{{ slurm_version }}/INSTALL"

- name: Create {{ slurm_os_dir }}
  file:
    path: "{{ slurm_os_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0775

- name: Build and install slurm on {{ distribution }} {{ distribution_major_version }} on {{ architecture }}
  args:
    creates: "{{ slurm_bin_dir }}/srun"
  shell: |
    set -xe

    set -o pipefail

    cd {{ slurm_src_dir }}/slurm-{{ slurm_version }}
    ./configure --prefix {{ slurm_os_dir }} --with-slurmrestd --enable-slurmrestd --with-slurmrestd-port={{ slurmrestd_port }} &> configure.log
    CORES=$(grep processor /proc/cpuinfo | wc -l)
    make -j $CORES &> slurm-make.log
    make -j $CORES contrib &> slurm-make-contrib.log

    make install &> slurm-make-install.log
    make install-contrib &> slurm-make-install-contrib.log

- name: Create {{ slurm_etc_dir }}
  file:
    path: "{{ slurm_etc_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0775

- name: Create {{ slurm_os_dir }}/etc
  file:
    state: link
    src:  "{{ slurm_etc_dir }}"
    path: "{{ slurm_os_dir }}/etc"
    owner: root
    group: root

- name: Create {{ slurm_os_dir }}/etc
  file:
    state: link
    src:  "{{ slurm_os_dir }}/lib/libnss_slurm.so.2"
    path: "/usr/lib64/libnss_slurm.so.2"
    owner: root
    group: root

# - name: Enable nss_slurm
#   lineinfile:
#     path: /etc/nsswitch.conf
#     state: present
#     regexp: '^(passwd:\s+)'
#     line: '\1nss_slurm sss files systemd'
#     backrefs: yes
#     backup: yes

- name: Fix permissions on config dir so users can access it to get the modulefiles
  file:
    path: "{{ slurm_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create {{ modulefiles_base_dir }}/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}/{{ cluster_name }}
  file:
    path: "{{ modulefiles_base_dir }}/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}/{{ cluster_name }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  register: create_modulefile_dir_result

- name: Fix modulefile permissions
  when: create_modulefile_dir_result
  shell:
    cmd: |
      set -ex

      chmod -R 0755 {{ slurm_config_dir }}

- name: Create slurm modulefile .template
  template:
    dest: "{{ modulefiles_base_dir }}/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}/{{ cluster_name }}/.template"
    src:  opt/slurm/config/modules/modulefiles/slurm/.template
    owner: root
    group: root
    mode: '0664'
    force: yes

- name: Create slurm modulefile
  file:
    path: "{{ modulefiles_base_dir }}/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}/{{ cluster_name }}/{{ parallel_cluster_version }}"
    src:  ".template"
    state: link
    owner: root
    group: root
    mode: '0664'

- name: Create slurm modulefile .version
  template:
    dest: "{{ modulefiles_base_dir }}/{{ distribution }}/{{ distribution_major_version }}/{{ architecture }}/{{ cluster_name }}/.version"
    src:   opt/slurm/config/modules/modulefiles/slurm/.version
    owner: root
    group: root
    mode: '0664'
    force: yes

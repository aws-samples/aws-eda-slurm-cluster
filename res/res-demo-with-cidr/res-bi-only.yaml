Description: Research and Engineering Studio on AWS demo batteries included only. Based on res-demo-stack.yaml. This stack deletes the RES-specific parameters and resources.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          # change
          default: RES batteries included configuration
          # endchange
        Parameters:
          - EnvironmentName
          - CreateActiveDirectory
      - Label:
          default: Access Management
        Parameters:
          - Keypair
          - ClientIpCidr
          - InboundPrefixList
        # change
      - Label:
          default: AD user and group and network configuration
        Parameters:
          - LDIFS3Path
      - Label:
          default: Optional network configuration
        Parameters:
          - VpcCidrBlock
          - VpcCidrPublicSubnetA
          - VpcCidrPublicSubnetB
          - VpcCidrPublicSubnetC
          - VpcCidrPrivateSubnetA
          - VpcCidrPrivateSubnetB
          - VpcCidrPrivateSubnetC
        # endchange

Parameters:

  Keypair:
    Description: EC2 Keypair to access management instance.
    Type: AWS::EC2::KeyPair::KeyName
    Default: ""

  EnvironmentName:
    # change
    Description: Provide name of the RES Environment for the BI stack. Must be unique for your account and AWS Region. Used to tag the file system. Suggest using the StackName.
    # endchange
    Type: String
    # change
    Default: res-bi
    # endchange
    MinLength: 5
    MaxLength: 11
    AllowedPattern: ^res-[a-z\-\_0-9]{0,7}$
    ConstraintDescription: EnvironmentName must start with "res-" without capital letters and should be less than or equal to 11 characters.

  ClientIpCidr:
    Description: Default IP(s) allowed to directly access the Web UI, SSH into the bastion host, and access the Windows AD admin host. We recommend that you restrict it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/)
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Value must be a valid IP or network range of the form x.x.x.x/x.

  InboundPrefixList:
    Description: (Optional) VPC Prefix List controlling inbound access to Web UI, bastion host, and Windows AD admin host.
    Default: ""
    Type: String
    AllowedPattern: ^(pl-[a-z0-9]{8,20})?$
    ConstraintDescription: Must be a valid VPC Prefix List ID, which begins with `pl-` or be empty.

  CreateActiveDirectory:
    Description: Create a demo Active Directory for RES to connect to.
    Type: String
    Default: "False"
    AllowedValues:
         - "True"
         - "False"

  # change
  LDIFS3Path:
    Description: An S3 Path (without the s3://) to an LDIF file that will be used during stack creation.
    Type: String
    Default: {{ LDIFS3Path }}

  VpcCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.0.0/16
    Description: VPC CIDR Block (eg 10.3.0.0/16)
    Type: String

  VpcCidrPublicSubnetA:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.0.0/20
    Description: VPC CIDR Block for the Public Subnet A
    Type: String

  VpcCidrPublicSubnetB:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.16.0/20
    Description: VPC CIDR Block for the Public Subnet B
    Type: String

  VpcCidrPublicSubnetC:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.32.0/20
    Description: VPC CIDR Block for the Public Subnet C
    Type: String

  VpcCidrPrivateSubnetA:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.128.0/20
    Description: VPC CIDR Block for the Private Subnet A
    Type: String

  VpcCidrPrivateSubnetB:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.144.0/20
    Description: VPC CIDR Block for the Private Subnet B
    Type: String

  VpcCidrPrivateSubnetC:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.160.0/20
    Description: VPC CIDR Block for the Private Subnet C
    Type: String
  # endchange

Conditions:
  UseEnvironmentName: !Not [!Equals [!Ref EnvironmentName, ""]]
  CreateAD: !Equals [!Ref CreateActiveDirectory, "True"]

Resources:

  AdminPassword:
    Condition: CreateAD
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Active Directory Administrator Account Password.
      Name: !Sub [ "res-AdminPassword-${StackName}-${StackId}", {StackName: !Select [1, !Split ['/', !Ref 'AWS::StackId']], StackId: !Select [2, !Split ['/', !Ref 'AWS::StackId']]}]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Admin"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
      Tags:
        - Key: res:Deployment
          Value: "true"
        - Key: res:EnvironmentName
          Value: !Ref EnvironmentName

  ServiceAccountPassword:
    Condition: CreateAD
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Active Directory Service Account Password.
      Name: !Sub [ "res-ServiceAccountPassword-${StackName}-${StackId}", {StackName: !Select [1, !Split ['/', !Ref 'AWS::StackId']], StackId: !Select [2, !Split ['/', !Ref 'AWS::StackId']]}]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ServiceAccount"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
      Tags:
        - Key: res:Deployment
          Value: "true"
        - Key: res:EnvironmentName
          Value: !Ref EnvironmentName

  RESExternal:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        # change
        LDIFS3Path : !Ref LDIFS3Path
        VpcCidrBlock: !Ref VpcCidrBlock
        VpcCidrPublicSubnetA: !Ref VpcCidrPublicSubnetA
        VpcCidrPublicSubnetB: !Ref VpcCidrPublicSubnetB
        VpcCidrPublicSubnetC: !Ref VpcCidrPublicSubnetC
        VpcCidrPrivateSubnetA: !Ref VpcCidrPrivateSubnetA
        VpcCidrPrivateSubnetB: !Ref VpcCidrPrivateSubnetB
        VpcCidrPrivateSubnetC: !Ref VpcCidrPrivateSubnetC
        # endchange
        PortalDomainName: ""
        Keypair: !Ref Keypair
        EnvironmentName: !If [UseEnvironmentName, !Ref EnvironmentName, ""]
        AdminPassword: !If [CreateAD, !Ref AdminPassword, ""]
        ServiceAccountPassword: !If [CreateAD, !Ref ServiceAccountPassword, ""]
        ClientIpCidr: !Ref ClientIpCidr
        ClientPrefixList: !Ref InboundPrefixList
        RetainStorageResources: "False"
        CreateActiveDirectory: !Ref CreateActiveDirectory
      # change
      #TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/res/res_demo_env/assets/bi.yaml
      TemplateURL: https://{{TemplateBucket}}.s3.amazonaws.com/{{TemplateBaseKey}}/bi.yaml
      # endchange

  InvokeDeleteSharedStorageSecurityGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: InvokeConfigureSSOLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentName}-delete_shared_storage_security_group
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:DeleteSecurityGroup
                  - ec2:DescribeNetworkInterfaces
                Resource: '*'

  InvokeDeleteSharedSecurityGroupHandlerFunction:
      Type: 'AWS::Lambda::Function'
      DependsOn:
      - InvokeDeleteSharedStorageSecurityGroupRole
      Properties:
        Description: 'Deletes the shared storage security group when the stack is deleted.'
        FunctionName: !Sub InvokeDeleteSharedSecurityGroupHandlerFunction-${AWS::StackName}
        Timeout: 360 # 6 minutes
        Role: !GetAtt InvokeDeleteSharedStorageSecurityGroupRole.Arn
        Handler: index.handler
        Runtime: python3.11
        Code:
          ZipFile: |
            import boto3
            import os
            import logging
            import cfnresponse

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            def handler(event, context):
              logger.info(f"Received event: {event}")
              response = {}

              if event["RequestType"] == "Delete":
                try:
                  ec2 = boto3.client("ec2")
                  sgResponse = ec2.describe_security_groups(
                    Filters=[
                      {
                        'Name': 'group-name',
                        'Values': [
                          f"{os.environ['ENVIRONMENT_NAME']}-shared-storage-security-group",
                        ]
                      }
                    ]
                  )

                  if len(sgResponse['SecurityGroups']) == 0:
                    response['Output'] = "Shared storage security group not found."
                  else:
                    ec2.delete_security_group(GroupId=sgResponse['SecurityGroups'][0]['GroupId'])
                    response['Output'] = "Shared storage security group deleted."

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                except Exception as e:
                  logger.error(f"Error: Unable to delete shared storage security group: {e}")
                  response['Output'] = f"Error: Unable to delete shared storage security group: {e}"
                  cfnresponse.send(event, context, cfnresponse.FAILED, response)
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
        Environment:
          Variables:
            ENVIRONMENT_NAME: !Ref EnvironmentName

  InvokeDeleteSharedStorageSecurityGroup:
    Type: Custom::DeleteSharedStorageSecurityGroup
    Properties:
      ServiceToken: !GetAtt InvokeDeleteSharedSecurityGroupHandlerFunction.Arn

Outputs:
  # change
  VpcId:
    Description: VPC id
    Value: !GetAtt [ RESExternal, Outputs.VpcId ]
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  PublicSubnets:
    Description: Public subnets
    Value: !GetAtt [ RESExternal, Outputs.PublicSubnets ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnets"
  PrivateSubnets:
    Description: Private subnets
    Value: !GetAtt [ RESExternal, Outputs.PrivateSubnets ]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnets"
  ActiveDirectoryName:
    Description: Fully Qualified Domain Name (FQDN) for your Active Directory
    Value: !GetAtt [ RESExternal, Outputs.ActiveDirectoryName ]
    Export:
      Name: !Sub "${AWS::StackName}-ActiveDirectoryName"
  ADShortName:
    Description: Please provide the short name in Active directory
    Value: !GetAtt [ RESExternal, Outputs.ADShortName ]
    Export:
      Name: !Sub "${AWS::StackName}-ADShortName"
  LDAPBase:
    Value: !GetAtt [ RESExternal, Outputs.LDAPBase ]
    Export:
      Name: !Sub "${AWS::StackName}-LDAPBase"
  LDAPConnectionURI:
    Value: !GetAtt [ RESExternal, Outputs.LDAPConnectionURI ]
    Export:
      Name: !Sub "${AWS::StackName}-LDAPConnectionURI"
  ServiceAccountCredentialsSecretArn:
    Value: !GetAtt [ RESExternal, Outputs.ServiceAccountCredentialsSecretArn ]
    Export:
      Name: !Sub "${AWS::StackName}-ServiceAccountCredentialsSecretArn"
  UsersOU:
    Description: The OU for all users who might join the system. The value provided here is based off of a supplied LDIF file.
    Value: !GetAtt [ RESExternal, Outputs.UsersOU ]
    Export:
      Name: !Sub "${AWS::StackName}-UsersOU"
  GroupsOU:
    Description: The OU for groups that users belong to who might join the system. The value provided here is based off of a supplied LDIF file.
    Value: !GetAtt [ RESExternal, Outputs.GroupsOU ]
    Export:
      Name: !Sub "${AWS::StackName}-GroupsOU"
  ComputersOU:
    Description: The OU for computers that join the AD. The value provided here is based off of a supplied LDIF file.
    Value: !GetAtt [ RESExternal, Outputs.ComputersOU ]
    Export:
      Name: !Sub "${AWS::StackName}-ComputersOU"
  SharedHomeFilesystemId:
    Value: !GetAtt [ RESExternal, Outputs.SharedHomeFilesystemId ]
    Export:
      Name: !Sub "${AWS::StackName}-SharedHomeFilesystemId"
  ServiceAccountUserDN:
    Description: The Distinguished Name (DN) of the ServiceAccount user in your Active Directory
    Value: !GetAtt [ RESExternal, Outputs.ServiceAccountUserDN ]
    Export:
      Name: !Sub "${AWS::StackName}-ServiceAccountUserDN"
  # endchange

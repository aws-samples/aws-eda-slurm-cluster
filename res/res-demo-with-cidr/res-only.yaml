Description: Research and Engineering Studio on AWS environment. Requires the res-bi-only.yaml stack to have already been deployed. Based on res-demo-stack.yaml. Deletes the parameters and resources created by res-bi-only.yaml.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: RES Configuration
        Parameters:
          - EnvironmentName
          - AdministratorEmail
          - CreateActiveDirectory
          # change
          - KeycloakInstanceType
          # endchange
      - Label:
          default: Access Management
        Parameters:
          - Keypair
          - ClientIpCidr
          - InboundPrefixList
      # change
      - Label:
          default: res-bi-only stack name
        Parameters:
          - BiStackName
      # endchange

Parameters:

  Keypair:
    Description: EC2 Keypair to access management instance.
    Type: AWS::EC2::KeyPair::KeyName
    Default: ""

  EnvironmentName:
    Description: Provide name of the RES Environment. Must be unique for your account and AWS Region.
    Type: String
    Default: res-demo
    # change
    MinLength: 5
    MaxLength: 11
    # endchange
    AllowedPattern: ^res-[a-z\-\_0-9]{0,7}$
    ConstraintDescription: EnvironmentName must start with "res-" without capital letters and should be less than or equal to 11 characters.

  AdministratorEmail:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$

  # change
  KeycloakInstanceType:
    Type: String
    Default: t3.medium
  # endchange

  ClientIpCidr:
    Description: Default IP(s) allowed to directly access the Web UI, SSH into the bastion host, and access the Windows AD admin host. We recommend that you restrict it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/)
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Value must be a valid IP or network range of the form x.x.x.x/x.

  InboundPrefixList:
    Description: (Optional) VPC Prefix List controlling inbound access to Web UI, bastion host, and Windows AD admin host.
    Default: ""
    Type: String
    AllowedPattern: ^(pl-[a-z0-9]{8,20})?$
    ConstraintDescription: Must be a valid VPC Prefix List ID, which begins with `pl-` or be empty.

  CreateActiveDirectory:
    Description: Create a demo Active Directory for RES to connect to.
    Type: String
    Default: "False"
    AllowedValues:
         - "True"
         - "False"

  # change
  BiStackName:
    Description: RES Batteries included (BI) stack name
    Type: String
  # endchange

Conditions:
  UseEnvironmentName: !Not [!Equals [!Ref EnvironmentName, ""]]
  CreateAD: !Equals [!Ref CreateActiveDirectory, "True"]

Resources:

  RES:
    Type: AWS::CloudFormation::Stack
    # change
    # DependsOn: InvokeDeleteSharedStorageSecurityGroup
    # endchange
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        AdministratorEmail: !Ref AdministratorEmail
        SSHKeyPair: !Ref Keypair
        ClientIp: !Ref ClientIpCidr
        ClientPrefixList: !Ref InboundPrefixList
        CustomDomainNameforWebApp: ""
        ACMCertificateARNforWebApp: ""
        CustomDomainNameforVDI: ""
        PrivateKeySecretARNforVDI: ""
        CertificateSecretARNforVDI: ""
        DomainTLSCertificateSecretArn: ""
        # change
        VpcId: {"Fn::ImportValue": !Sub "${BiStackName}-VpcId"}
        LoadBalancerSubnets: {"Fn::ImportValue": !Sub "${BiStackName}-PublicSubnets"}
        InfrastructureHostSubnets: {"Fn::ImportValue": !Sub "${BiStackName}-PrivateSubnets"}
        VdiSubnets: {"Fn::ImportValue": !Sub "${BiStackName}-PrivateSubnets"}
        # endchange
        IsLoadBalancerInternetFacing: "true"
        # change
        ActiveDirectoryName: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-ActiveDirectoryName"}, ""]
        ADShortName: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-ADShortName"}, ""]
        LDAPBase: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-LDAPBase"}, ""]
        LDAPConnectionURI: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-LDAPConnectionURI"}, ""]
        # endchange
        SudoersGroupName: !If [CreateAD, RESAdministrators, ""]
        # change
        ServiceAccountCredentialsSecretArn: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-ServiceAccountCredentialsSecretArn"}, ""]
        UsersOU: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-UsersOU"}, ""]
        GroupsOU: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-GroupsOU"}, ""]
        ComputersOU: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-ComputersOU"}, ""]
        SharedHomeFileSystemId: {"Fn::ImportValue": !Sub "${BiStackName}-SharedHomeFilesystemId"}
        # endchange
        InfrastructureHostAMI: ""
        EnableLdapIDMapping: "True"
        IAMPermissionBoundary: ""
        DisableADJoin: "False"
        # change
        ServiceAccountUserDN: !If [CreateAD, {"Fn::ImportValue": !Sub "${BiStackName}-ServiceAccountUserDN"}, ""]
        # endchange
        HttpProxy: ""
        HttpsProxy: ""
        NoProxy: ""
        IAMResourcePrefix: ""
        IAMResourcePath: ""
      TemplateURL: https://research-engineering-studio-us-east-1.s3.amazonaws.com/releases/latest/ResearchAndEngineeringStudio.template.json

  RESSsoKeycloak:
    Condition: CreateAD
    Type: AWS::CloudFormation::Stack
    DependsOn: RES
    Properties:
      Parameters:
        # change
        InstanceType: !Ref KeycloakInstanceType
        # endchange
        EnvironmentName: !Ref EnvironmentName
        Keypair: !Ref Keypair
        # change
        ServiceAccountCredentialsSecretArn: {"Fn::ImportValue": !Sub "${BiStackName}-ServiceAccountCredentialsSecretArn"}
        VpcId: {"Fn::ImportValue": !Sub "${BiStackName}-VpcId"}
        PublicSubnet: !Select [0, !Split [",", {"Fn::ImportValue": !Sub "${BiStackName}-PublicSubnets"}]]
        ServiceAccountUserDN: {"Fn::ImportValue": !Sub "${BiStackName}-ServiceAccountUserDN"}
        UsersDN: {"Fn::ImportValue": !Sub "${BiStackName}-LDAPBase"}
        LDAPConnectionURI: {"Fn::ImportValue": !Sub "${BiStackName}-LDAPConnectionURI"}
        # endchange
      #TemplateURL: https://aws-hpc-recipes.s3.us-east-1.amazonaws.com/main/recipes/res/res_demo_env/assets/res-sso-keycloak.yaml
      TemplateURL: https://{{TemplateBucket}}.s3.amazonaws.com/{{TemplateBaseKey}}/res-sso-keycloak.yaml
      # endchange

  # change
  RESPostDeploymentConfigurationFunctionRole:
  # endchange
    Type: 'AWS::IAM::Role'
    DependsOn: RES
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LogOutput
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: DynamoDBReadWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                    - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EnvironmentName}.cluster-settings
                    - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EnvironmentName}.cluster-settings/stream/*
                Condition:
                  ForAllValues:StringLike:
                    dynamodb:LeadingKeys:
                      - shared-storage.*

  # change
  RESPostDeploymentConfigurationFunction:
  # endchange
      Type: 'AWS::Lambda::Function'
      DependsOn:
      - RES
      # change
      - RESPostDeploymentConfigurationFunctionRole
      # endchange
      Properties:
        Description: 'Post configuration of RES for demo purposes'
        # change
        FunctionName: !Sub ${EnvironmentName}-RESPostDeploymentConfigurationFunction-${AWS::StackName}
        # endchange
        Timeout: 60
        # change
        Role: !GetAtt RESPostDeploymentConfigurationFunctionRole.Arn
        # endchange
        Handler: index.handler
        Runtime: python3.11
        Code:
          ZipFile: |
            import boto3
            import os
            import logging
            import cfnresponse

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            def handler(event, context):
              logger.info(f"Received event: {event}")
              response = {}

              if event["RequestType"] == "Create":
                try:
                  dynamodb = boto3.resource('dynamodb')
                  cluster_settings_table = dynamodb.Table(f"{os.environ['ENVIRONMENT_NAME']}.cluster-settings")

                  demo_config = {
                    'shared-storage.enable_file_browser': True
                  }

                  for key, value in demo_config.items():
                    item_response = cluster_settings_table.get_item(
                        Key={
                            'key': key
                        }
                    )

                    if 'Item' in item_response:
                        logger.info(f"Item found: {item_response['Item']}")

                        # Update the item
                        update_response = cluster_settings_table.update_item(
                            Key={
                                'key': key
                            },
                            UpdateExpression="SET #val = :val",
                            ExpressionAttributeNames={
                                '#val': 'value'
                            },
                            ExpressionAttributeValues={
                                ':val': value
                            },
                            ReturnValues="UPDATED_NEW"
                        )

                        logger.info(f"Item updated: {update_response['Attributes']}")
                    else:
                        logger.info(f"Item with key '{key}' not found")

                  response['Output'] = 'RES demo environment has been pre-configured.'
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                except Exception as e:
                  logger.error(f"Error: Unable to pre-configure RES demo environment: {e}")
                  response['Output'] = f"Error: Unable to pre-configure RES demo environment: {e}"
                  cfnresponse.send(event, context, cfnresponse.FAILED, response)
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
        Environment:
          Variables:
            ENVIRONMENT_NAME: !Ref EnvironmentName

  # change
  RESPostDeploymentConfiguration:
    Type: Custom::RESPostDeploymentConfiguration
  # endchange
    Properties:
      # change
      ServiceToken: !GetAtt RESPostDeploymentConfigurationFunction.Arn
      # endchange

Outputs:
  KeycloakUrl:
    Description: Keycloak Administrator Url
    Value: !GetAtt [ RESSsoKeycloak, Outputs.KeycloakUrl ]
    Condition: CreateAD
  KeycloakAdminPasswordSecretArn:
    Description: Keycloak password for admin user
    Value: !GetAtt [ RESSsoKeycloak, Outputs.KeycloakAdminPasswordSecretArn ]
    Condition: CreateAD
  ApplicationUrl:
    Description: RES application Url
    Value: !GetAtt [ RESSsoKeycloak, Outputs.ApplicationUrl ]
    Condition: CreateAD
